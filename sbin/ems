#!/bin/bash
#
# Program: The ems (Easy Manage Server) is conducive to the management system and security considerations of system, using bash development.
# Version: 1.0
# Author: shazi
# Github: https://github.com/shazi7804

# ems config path, not deleting rows

# text format
BaseLine='\033[4m'
Reset='\033[0m'

helpmsg(){
  echo ""
  echo -e "Usage: $0 [option|host] [command]"
  echo ""
  echo -e "[option]"
  echo -e "  init ${BaseLine}ems,host${Reset}     The initialization ssh key."
  echo ""
  echo -e "  -l                Filter the displayed type name (default all)"
  echo -e "  -h,--help         help message."
  echo -e "  -v,--version      show ems version."
  echo ""
  echo -e "Login system example:"
  echo -e "  $ ems devops"
  echo -e "  $ ems demo"
  echo ""
  echo -e "Remote command, last add command:"
  echo -e "  $ ems devops pwd"
  echo -e "  $ ems demo ls -l"
  echo ""
}

HostList(){
  local i
  echo ""
  echo "Server Info:"
  echo ""
  printf "   %-${info_alias_bit}s %-${info_hostname_bit}s %-${info_ip}s\n" 'Alias' 'HostName' 'IP'
  printf "%s\n" "-----------------------------------------------"
  if [ $1 ]; then
    filter=$1
    shift
    for (( i = 0; i < ${#Alias[@]}; i++ )); do
      if [[ $filter == ${Type[i]} ]]; then
        printf "   %-${info_alias_bit}s %-${info_hostname_bit}s %-${info_ip}s\n" ${Alias[i]} ${Server[i]} ${IP[i]}
      fi
    done
  else
    for (( i = 0; i < ${#Alias[@]}; i++ )); do
      printf "   %-${info_alias_bit}s %-${info_hostname_bit}s %-${info_ip}s\n"  ${Alias[i]} ${Server[i]} ${IP[i]}
    done
  fi
  echo ""
}

InitKey() {
  read -r -p "Are you sure to initialize ems ? [y/n]: " initemsyn
  if [[ $initemsyn =~ ^([yY][eE][sS]|[yY])$ ]]; then
    test -d $ems_keydir || mkdir -p $ems_keydir
    if [ ! -z $ems_keydir ];then
      ssh-keygen -t rsa -b 4096 -q -f $ems_keydir/ems -P ''
    fi
    if [[ $? -eq "0" ]]; then
      echo ""
      echo "Initialize info:"
      echo ""
      echo "Private key: $ems_keydir/ems"
      echo "Public key:  $ems_keydir/ems.pub"
      echo ""
    fi
  elif [[ $initemsyn =~ ^([nN][oO]|[nN])$ ]]; then
    echo "Initialize exit."
    echo ""
  else
    echo "ems warn: need input yes or no."
    InitKey
  fi
}

HostInfo() {
  # active , ip
  local hostopt
  if [[ $# -gt 0 ]]; then
    for hostopt in $@
    do
      case $hostopt in
        add)
          shift

          ;;
        set)
          shift

          ;;
      esac
    done
  fi
}

DomainInfo() {
  echo "not work"
}

RemoteLogin(){
  local i
  shift
  for (( i = 0; i <${#Server[@]}; i++ )); do
    if [[ $Host == ${Alias[i]} ]]; then
      ssh -i ${ems_keydir}/$ems_keyname -2 -p ${Port[i]} -o ConnectTimeout=$Time_Retry ${User[i]}@${IP[i]}
    fi
  done
}

Rcmd(){
  local i
  shift
  for (( i = 0; i <${#Server[@]}; i++ )); do
    if [[ $Host == ${Alias[i]} ]]; then
      ssh -i ${ems_keydir}/$ems_keyname -2 -p ${Port[i]} -o ConnectTimeout=$Time_Retry ${User[i]}@${IP[i]} "$@"
    fi
  done
  exit 0
}

# not include config function.
case $@ in
  -h|--help)
    helpmsg
    exit 0
    ;;
  -v|--version)
    echo "ems (Easy Manage Server) $ems_ver"
    echo "Copyright (C) 2016-2017 The ems Author shazi"
    echo ""
    echo "This is free software."
    echo ""
    echo "github: http://github.com/shazi7804"
    echo "blog: http://shazi.info"
    echo ""
    exit 0
    ;;
esac

# include config
if [ -e $ems_config ]; then
  source $ems_config
else
  echo "ems error: ems config not found."
fi


if ls $ems_sitelist &>/dev/null; then
  if [[ "testing" == $config_opt ]]; then
    echo "ems notice: configuration file $ems_config test is successful."
    echo ""
  else
    for q in $ems_sitelist/*.conf; do source $q; done
  fi
else
  echo "ems warn: The site list data not found."
fi


if [[ $# -gt 0 ]]; then
  for opt in $@
  do
    case $opt in
      init)
        shift

        for initopt in $@; 
        do
          case $initopt in
            ems)
              shift
              InitKey
              ;;
            host)
              shift
              hostip=($@)
              shift
              for (( i = 0; i < ${#hostip[@]}; i++ )); do
                cp ${ems_keydir}/${ems_keyname}.pub ${ems_keydir}/authorized_keys
                rsync --chmod=u+r,g-rwx,o-rwx -e "ssh -i ${ems_keydir}/${ems_keyname}" $ems_keydir/authorized_keys ${ems_USER}@${hostip[i]}:~/.ssh/
              done
              exit 0
              ;;
          esac
        done
        ;;
      add)
        shift
        if [ $1 ]; then
          add_opt=$1
        else
          echo "ems warn: There must be parameter."
          exit 1
        fi

        case $add_opt in
          --host=*)
            shift
            target_host="${opt#*=}"
            HostInfo add target_host
            ;;
          --domain=*)
            shift
            DomainInfo="${opt#*=}"
            ;;
        esac
        ;;
        set)
          shift
        ;;
      -l)
        shift
        if [ $1 ]; then
          Listfilter=$1
          HostList $Listfilter
        else
          echo "ems warn: You must select a type name !!"
          echo ""
          echo "${Type[@]}" | tr ' ' '\n' | sort -u
          echo ""
        fi
        ;;
      *)
        Host=$1
        shift
        if [ "$1" ]; then
          Cmd=$@
          Rcmd $Host $Cmd
        else
          RemoteLogin $Host
        fi
        ;;
    esac
  done
else
  HostList
fi



