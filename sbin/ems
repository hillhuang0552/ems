#!/bin/bash
#
# Program: The ems (Easy Manage Server) is conducive to the management system and security considerations of system, using bash development.
# Version: 1.2
# Author: shazi
# Github: https://github.com/shazi7804

# ems config path, not deleting rows
ems_config=/usr/local/ems/config/ems.conf

# text format
BaseLine='\033[4m'
Reset='\033[0m'

# help message
helpmsg(){
  echo ""
  echo -e "Usage: $0 [option|host] [command]"
  echo ""
  echo -e "[option]"
  echo -e "  --import-from=[csv]"
  echo -e "  -l                         Filter the displayed type name (default all)"
  echo -e "  -h,--help                  help message."
  echo -e "  -v,--version               show ems version."
  echo ""
  echo -e "Login:"
  echo -e "  $ ems go devops"
  echo -e "  $ ems go demo"
  echo ""
  echo -e "Remote command, last add command:"
  echo -e "  $ ems go devops ifconfig"
  echo -e ""
  echo -e "You can also use 'id' send command to site group"
  echo -e "  $ ems go -id 0,1 ifconfig"
  echo ""
}

# log format
LogFormat(){
  local reset green red status message
  reset='\033[0m'
  green='\033[033;32m'
  red='\033[033;31m'

  status=$1
  shift
  message=$@
  if [[ "info" == $status ]]; then
    echo -e "${green}[ems][$status]: ${message}${reset}"
  elif [[ "warn" == $status ]]; then
    echo -e "[ems][$status]: ${message}"
  elif [[ "error" == $status ]]; then
    echo -e "${red}[ems][$status]: ${message}${rest}"
    exit 1
  fi
}

# list all hosts
HostList(){
  local i j
  CallSite
  echo ""
  echo "--------------------------------------------------"
  printf "  %-3s %-${info_alias_bit}s %-${info_hostname_bit}s %-${info_ip}s\n" 'id' 'Alias' 'HostName' 'IP'
  printf "%s\n" "--------------------------------------------------"

  if [ $1 ]; then
    filter=$1
    shift
    for (( i = 0; i < ${#Alias[@]}; i++ )); do
      if [[ $filter == ${Group[i]} ]]; then
        printf "  %-3s %-${info_alias_bit}s %-${info_hostname_bit}s %-${info_ip}s\n"  ${id[i]} ${Alias[i]} ${HostName[i]} ${IP[i]}
      fi
    done
  else
    for (( i = 0; i < ${#Alias[@]}; i++ )); do
      printf "  %-3s %-${info_alias_bit}s %-${info_hostname_bit}s %-${info_ip}s\n"  ${id[i]} ${Alias[i]} ${HostName[i]} ${IP[i]}
    done
  fi
  echo ""
}

# need IMPORT_LIST arguments. 
ImportFromAdd(){
  CSV_FILE=$1
  # If no data be "NA"
  # f1 = Group
  # f2 = Alias
  # f3 = HostName
  # f4 = User
  # f5 = Port
  # f6 = IP
  while IFS="," read f1 f2 f3 f4 f5 f6
  do
sudo tee -a $ems_sitelist/$f1.conf <<EOF
Group+=($f1)
Alias+=($f2)
HostName+=($f3)
User+=($f4)
Port+=($f5)
IP+=($f6)

EOF
  done < $CSV_FILE
}

# need IMPORT_LIST arguments. 
ImportFromALL(){
  sudo find $ems_sitelist -type f -iname "*.conf" -delete
  CSV_FILE=$1
  # If no data be "NA"
  # f1 = Group
  # f2 = Alias
  # f3 = HostName
  # f4 = User
  # f5 = Port
  # f6 = IP
  while IFS="," read f1 f2 f3 f4 f5 f6
  do
sudo tee -a $ems_sitelist/$f1.conf <<EOF
Group+=($f1)
Alias+=($f2)
HostName+=($f3)
User+=($f4)
Port+=($f5)
IP+=($f6)

EOF
  done < $CSV_FILE
}

CallSite(){
  # import all site
  allsite=($(find $ems_sitelist -type f -name "*.conf"))
  if find $ems_sitelist -type f -name "*.conf" &>/dev/null; then
    for (( i = 0; i < ${#allsite[@]}; i++ )); do
      source ${allsite[i]}
    done
  else
    LogFormat warn The site list data not found.
  fi

  # Init site id
  for (( i = 0; i < ${#Alias[@]}; i++ )); do
    id+=($i)
  done
}

# need $Host arguments.
RemoteLogin(){
  if [ $Host ]; then
    for (( i = 0; i <${#HostName[@]}; i++ )); do
      if [ $Host == ${Alias[i]} ]; then
        if [ ${User[i]} == 'NA' ]; then
          ssh -i ${ems_keydir}/$ems_keyname -2 -p ${Port[i]} -o ConnectTimeout=$Time_Retry ${ems_USER}@${IP[i]}
        else
          ssh -i ${ems_keydir}/$ems_keyname -2 -p ${Port[i]} -o ConnectTimeout=$Time_Retry ${User[i]}@${IP[i]}
        fi
      fi
    done
  else
    echo "Remote site nees 'Host' arguments."
  fi
}

# need $Host and $CMD arguments.
Remotecmd(){
  if [[ -n $Ids ]] && [[ -n $CMD ]]; then
    for (( i = 0; i <${#Ids[@]}; i++ )); do
      for (( j = 0; j <${#Alias[@]}; j++ )); do
        if [[ ${Ids[i]} == $j ]]; then
          if [ ${User[i]} == 'NA' ]; then
            ssh -t -i ${ems_keydir}/$ems_keyname -2 -p ${Port[j]} -o ConnectTimeout=$Time_Retry ${ems_USER}@${IP[j]} "$CMD"
          else
            ssh -t -i ${ems_keydir}/$ems_keyname -2 -p ${Port[j]} -o ConnectTimeout=$Time_Retry ${User[j]}@${IP[j]} "$CMD"
          fi
        fi
      done
    done
  elif [[ -n $Host ]] && [[ -n $CMD ]]; then
    for (( i = 0; i <${#HostName[@]}; i++ )); do
      if [[ $Host == ${Alias[i]} ]]; then
        if [ ${User[i]} == 'NA' ]; then
          ssh -t -i ${ems_keydir}/$ems_keyname -2 -p ${Port[i]} -o ConnectTimeout=$Time_Retry ${ems_USER}@${IP[i]} "$CMD"
        else
          ssh -t -i ${ems_keydir}/$ems_keyname -2 -p ${Port[i]} -o ConnectTimeout=$Time_Retry ${User[i]}@${IP[i]} "$CMD"
        fi
      fi
    done
  fi
}

# not include config arguments.
case $@ in
  -h|--help)
    helpmsg
    exit 0
    ;;
  -v|--version)
    echo "ems (Easy Manage Server)"
    echo "Copyright (C) 2016-2017 The ems Author shazi7804"
    echo ""
    echo "This is free software."
    echo ""
    echo "github: https://github.com/shazi7804"
    echo "blog: https://shazi.info"
    echo ""
    exit 0
    ;;
esac

OWNER=$(id -nu)
OWNER_HOME=$(eval echo "~${OWNER}")

# include config
if [ -e $ems_config ]; then
  source $ems_config
  if [ -e $OWNER_HOME/.ems/ems.conf ]; then
    source $OWNER_HOME/.ems/ems.conf
  fi
else
  LogFormat error ems config not found.
  exit 1
fi

if [[ $# -gt 0 ]]; then
  for opt in $@
  do
    case $opt in
      go)
        shift
        if [[ $1 == '--id' ]]; then
          shift
          Ids_Data=($(echo $1 | sed 's/,/ /g'))
          Ids=($(for l in ${Ids_Data[@]}; do echo $l; done | sort))
          shift
          if [ $1 ]; then
            CMD=$@
            CallSite
            Remotecmd
          else
            echo "'--id' need 'command' arguments."
            exit 1
          fi
        else  
          CallSite
          Host=$1
          shift
          if [ "$1" ]; then
            CMD=$@
            Remotecmd
          else
            RemoteLogin
          fi
        fi
        ;;
      -g)
        shift
        if [ $1 ]; then
          Listfilter=$1
          HostList $Listfilter
        else
          LogFormat warn You must select a type name !!
          CallSite
          echo ""
          echo "${Group[@]}" | tr ' ' '\n' | sort -u
          echo ""
        fi
        exit 0
        ;;
      --import-from-add=*)
        CSV="${opt#*=}"
        ImportFromAdd $CSV
        ;;
      --import-from-all=*)
        CSV="${opt#*=}"
        read -r -p "Use '--import-from-all'' will be rebuild all site list [y/n]: " importyn
        if [[ $importyn =~ ^([yY][eE][sS]|[yY])$ ]]; then
          ImportFromALL $CSV
        elif [[ $importyn =~ ^([nN][oO]|[nN]|'')$ ]]; then
          exit 0
        fi
    esac
  done
else
  HostList
fi




